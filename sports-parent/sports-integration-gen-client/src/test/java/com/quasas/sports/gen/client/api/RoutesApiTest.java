/*
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.quasas.sports.gen.client.api;

import com.quasas.sports.gen.client.model.Fault;
import com.quasas.sports.gen.client.model.Route;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoutesApi
 */
@Ignore
public class RoutesApiTest {

    private final RoutesApi api = new RoutesApi();

    
    /**
     * Export Route GPX
     *
     * Returns a GPX file of the route. Requires read_all scope for private routes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRouteAsGPXTest() {
        Integer id = null;
        api.getRouteAsGPX(id);

        // TODO: test validations
    }
    
    /**
     * Export Route TCX
     *
     * Returns a TCX file of the route. Requires read_all scope for private routes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRouteAsTCXTest() {
        Integer id = null;
        api.getRouteAsTCX(id);

        // TODO: test validations
    }
    
    /**
     * Get Route
     *
     * Returns a route using its identifier. Requires read_all scope for private routes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRouteByIdTest() {
        Integer id = null;
        Route response = api.getRouteById(id);

        // TODO: test validations
    }
    
    /**
     * List Athlete Routes
     *
     * Returns a list of the routes created by the authenticated athlete using their athlete ID. Private routes are filtered out unless requested by a token with read_all scope.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoutesByAthleteIdTest() {
        Integer id = null;
        Integer page = null;
        Integer perPage = null;
        List<Route> response = api.getRoutesByAthleteId(id, page, perPage);

        // TODO: test validations
    }
    
}
