///*
// * Strava API v3
// * Strava API
// *
// * OpenAPI spec version: 3.0.0
// * 
// *
// * NOTE: This class is auto generated by the swagger code generator program.
// * https://github.com/swagger-api/swagger-codegen.git
// * Do not edit the class manually.
// */
//
//
//package com.quasas.sports.gen.client.api;
//
//import com.quasas.sports.gen.client.model.ActivityZone;
//import com.quasas.sports.gen.client.model.Comment;
//import com.quasas.sports.gen.client.model.DetailedActivity;
//import com.quasas.sports.gen.client.model.ERRORUNKNOWN;
//import com.quasas.sports.gen.client.model.Fault;
//import com.quasas.sports.gen.client.model.Lap;
//import com.quasas.sports.gen.client.model.SummaryActivity;
//import com.quasas.sports.gen.client.model.SummaryAthlete;
//import com.quasas.sports.gen.client.model.UpdatableActivity;
//import org.junit.Test;
//import org.junit.Ignore;
//
//import java.util.ArrayList;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
///**
// * API tests for ActivitiesApi
// */
//@Ignore
//public class ActivitiesApiTest {
//
//    private final ActivitiesApi api = new ActivitiesApi();
//
//    
//    /**
//     * Create an Activity
//     *
//     * Creates a manual activity for an athlete, requires activity:write scope.
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void createActivityTest() {
//        String name = null;
//        String type = null;
//        ERRORUNKNOWN startDateLocal = null;
//        Integer elapsedTime = null;
//        String description = null;
//        Float distance = null;
//        Integer trainer = null;
//        ERRORUNKNOWN photoIds = null;
//        Integer commute = null;
//        DetailedActivity response = api.createActivity(name, type, startDateLocal, elapsedTime, description, distance, trainer, photoIds, commute);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * Get Activity
//     *
//     * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getActivityByIdTest() {
//        Long id = null;
//        Boolean includeAllEfforts = null;
//        DetailedActivity response = api.getActivityById(id, includeAllEfforts);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * List Activity Comments
//     *
//     * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getCommentsByActivityIdTest() {
//        Long id = null;
//        Integer page = null;
//        Integer perPage = null;
//        List<Comment> response = api.getCommentsByActivityId(id, page, perPage);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * List Activity Kudoers
//     *
//     * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getKudoersByActivityIdTest() {
//        Integer id = null;
//        Integer page = null;
//        Integer perPage = null;
//        List<SummaryAthlete> response = api.getKudoersByActivityId(id, page, perPage);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * List Activity Laps
//     *
//     * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getLapsByActivityIdTest() {
//        Long id = null;
//        List<Lap> response = api.getLapsByActivityId(id);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * List Athlete Activities
//     *
//     * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getLoggedInAthleteActivitiesTest() {
//        Integer before = null;
//        Integer after = null;
//        Integer page = null;
//        Integer perPage = null;
//        List<SummaryActivity> response = api.getLoggedInAthleteActivities(before, after, page, perPage);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * Get Activity Zones
//     *
//     * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void getZonesByActivityIdTest() {
//        Integer id = null;
//        List<ActivityZone> response = api.getZonesByActivityId(id);
//
//        // TODO: test validations
//    }
//    
//    /**
//     * Update Activity
//     *
//     * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    public void updateActivityByIdTest() {
//        Long id = null;
//        UpdatableActivity body = null;
//        DetailedActivity response = api.updateActivityById(id, body);
//
//        // TODO: test validations
//    }
//    
//}
